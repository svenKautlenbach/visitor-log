***Solution documentation***

**Data preparation**

The time was chosen as a basis/root of the operations. Tool is expected to have a single input file as an argument which specifies clock in a format of "HH:MM". This means one needs to operate on a 24H interval where the smallest unit is a minute.

*record::Interval*
Time ranges in the input file are parsed into objects called "Interval" where each have two properties - entry and exit time. The unit of the properties is an unsigned integer in a range of 0-1339.
Also this "fundamental" type is used to solve the time range based tasks 1.b and 1.c.
*records*
Each "record::Interval" is collected into an array called "records" which has the item count equal to the time records present in a file.
*histogram*
Since there are 1440 minutes in 24 hours a map called "histogram" with 1440 items is created. The map is sequenced in chronological order as such that the key of the map item would be the minute mark (0-1339) and the value is the visitor count on that exact minute.
*attendanceIntervals*
A data set of unique intervals is created. Each item represents a time slot where visitor count remained steady, this is vector where each item has two properties - visitor count integer and a "record::Interval".
It is constructed using prefilled "histogram" map which is fed into "statistics::aggregate(...)" procedure that internally uses std algorithm library procedure called "find_if_not(...)".

**Solution to 1.b**
Using prefilled "attendanceIntervals" vector a function called "std::max_element(...)" is used to find the most popular minute marks' visitor count which is called "maxAttendance".
All the intervals from "attendanceIntervals" are printed out which have the visitor count equal to "maxAttendance".

**Solution to 1.c**
"attendanceIntervals" collection is simply printed out with the format given in the task.

**Varia**
Code was written in a "Clean Code"-ish manner where some of the variables in local scope where left terse and concise on purpose.
This code could be improved with some simple error checks on input data.