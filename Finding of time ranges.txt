***Solution documentation***

**Data preparation**

The time was chosen as a basis/root of all the operations. Tool is expected to have a single input file as an argument which specifies clock in a format of "HH:MM". This means one needs to operate on a 24H interval where the smallest unit is a minute.

*Record*
Time ranges in the input file are parsed into objects called "Record" where each have two properties - entry and exit time. The unit of the properties is an unsigned integer in a range of 0-1339.
*records*
Each "Record" is collected into an array called "records" which has the item count equal to the time records present in a file.
*visitCount*
Since there are 1440 minutes in 24 hours a map called "visitCount" with 1440 items is created. The map is sequenced in chronological order as such that the key of the map item would be the minute mark (0-1339) and the value is the visitor count on that exact minute.
*isPresent(...)*
Accompanying static function is created that has two inputs - a minute mark and the data record. This function called isPresent(...) simply returns a boolean that confirms if this data record represents a visiting time during that input minute mark.
All the "visitCount" map keys are iterated over the "records" array where the isPresent(...) function is called once per record. Each "true" operation increments the key value while false leaves the data intact.
*intervalCount*
A data set of unique intervals is created. Each item represents a time slot where visitor count remained steady, this is an object which consists of two properties - "Record" and a visitor count integer. This is called "intervalCount".
It is constructed using prefilled "visitCount" map and C++ std algorithm procedure called "find_if_not(...)".

**Solution to 1.b**
Using prefilled "visitCount" map a function called "std::max_element(...)" is used to find the most popular minute marks' visitor count which is called "maxVisitors".
All the intervals from "intervalCount" are printed out which have the visitor count equal to  "maxVisitors".

**Solution to 1.c**
"intervalCount* collection is simply printed out with the format given in the task.

